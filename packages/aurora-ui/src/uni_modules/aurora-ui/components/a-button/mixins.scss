@use '../../design/common/var.scss' as *;
@use '../../design/shared.scss' as *;

@mixin button-plain($type) {
  $button-color-types: (
    '': (
      'text-color': (
        'color',
        $type,
      ),
      'bg-color': (
        'color',
        $type,
        'light-9',
      ),
      'border-color': (
        'color',
        $type,
        'light-5',
      ),
    ),
    'active': (
      'text-color': (
        'color',
        'white',
      ),
    ),
  );

  @each $type, $typeMap in $button-color-types {
    @each $typeColor, $list in $typeMap {
      @include css-var-from-global(('button', $type, $typeColor), $list);
    }
  }
}

@mixin button-variant($type) {
  $button-color-types: (
    '': (
      'text-color': (
        'color',
        'white',
      ),
      'bg-color': (
        'color',
        $type,
      ),
      'border-color': (
        'color',
        $type,
      ),
      'active-color': (
        'color',
        $type,
        'dark-2',
      ),
    ),
    'active': (
      'text-color': (
        'color',
        'white',
      ),
      'bg-color': (
        'color',
        $type,
        'dark-2',
      ),
      'border-color': (
        'color',
        $type,
        'dark-2',
      ),
    ),
  );

  @each $type, $typeMap in $button-color-types {
    @each $typeColor, $list in $typeMap {
      @include css-var-from-global(('button', $type, $typeColor), $list);
    }
  }

  &.is-plain {
    @include button-plain($type);
  }

  &.is-plain.is-active {
    background: getCssVar('button', 'active', 'bg-color') !important;
    @include set-css-var-value(
      ('button', 'text-color'),
      getCssVar('button', 'active', 'text-color')
    );
  }
}

@mixin button-size(
  $padding-vertical,
  $padding-horizontal,
  $font-size,
  $button-height,
  $button-width
) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  height: $button-height;
  width: $button-width;
}
